#include <iostream>
#include<vector>

using namespace std;

struct Node {
public:
	int val;
	Node* next;
	Node(int val = -1): val(val), next(nullptr){}
	Node(int val, Node* next): val(val), next(next){}
};


class myQueue {
private:
	Node* head;
	Node* tail;
	int size;
public:
	myQueue() {
		head = new Node(-1);
		tail = head;
		size = 0;
	}
	~myQueue(){
		Node* p = head;
		while (head != nullptr) {
			head = p -> next;
			delete(p);
			p = head;
		}
		size = 0;
	}
	void push(int x) {
		Node* cur = new Node(x);
		tail -> next = cur;
		tail = cur;
		size++;
	}

	int front() {
		return head -> next -> val;
	}

	void pop() {
		Node* tmp = head -> next;
		head -> next = head -> next -> next;
		delete tmp;
		size--;
		if (size == 0)
			tail = head;
	}

	bool empty() {
		return size == 0;
	}

	void print() {
		for (auto p = head -> next; p != nullptr; p = p -> next)
			cout << p -> val << "->";
		cout << endl;
	}
};

int main() {
	myQueue* q = new myQueue();
	for (int i = 0; i < 10; ++i)
		q -> push(i);
	cout << q -> empty() << endl;
	cout << q -> front() << endl;
	q -> print();
	q -> pop();
	q -> print();
	delete q;
	return 0;
};

